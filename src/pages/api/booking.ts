// src/pages/api/booking.ts
export const prerender = false;

import type { APIRoute } from "astro";

type BookingPayload = {
  name?: string;
  phone?: string;
  selected_program?: string;
  date?: string;
  time?: string;
  selected_master?: string;
  message?: string;
};

// === –£—Ç–∏–ª–∏—Ç—ã ======================================================

const fmt = (v?: string) => (v && v.trim().length > 0 ? v.trim() : "‚Äî");

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è parse_mode: "HTML"
const escapeHtml = (s: string) =>
  s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

// === –¢–µ–ª–µ—Ñ–æ–Ω ======================================================

function normalizeRuPhone(raw?: string): string | null {
  if (!raw) return null;
  const digits = raw.replace(/\D/g, "");
  if (digits.length === 11 && (digits.startsWith("7") || digits.startsWith("8"))) {
    return "7" + digits.slice(1);
  }
  if (digits.length === 10) {
    return "7" + digits;
  }
  return null;
}

function prettyPhone(std: string): string {
  const p = std.replace(/\D/g, "");
  const a = p.slice(1, 4);
  const b = p.slice(4, 7);
  const c = p.slice(7, 9);
  const d = p.slice(9, 11);
  return `+7 (${a}) ${b}-${c}-${d}`;
}

// === –î–∞—Ç–∞ =========================================================

function formatRuDate(isoDate: string): string {
  const date = new Date(isoDate);
  return date.toLocaleDateString("ru-RU", {
    day: "numeric",
    month: "long",
    year: "numeric",
  });
}

function isPastDate(isoDate: string): boolean {
  const inputDate = new Date(isoDate);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  inputDate.setHours(0, 0, 0, 0);
  return inputDate < today;
}

// === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ==============================================

export const POST: APIRoute = async ({ request }) => {
  try {
    const data = (await request.json().catch(() => null)) as BookingPayload | null;

    if (!data) {
      return new Response(JSON.stringify({ ok: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã." }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const name = fmt(data.name);
    const phoneRaw = data.phone;
    const program = fmt(data.selected_program);
    const date = fmt(data.date);
    const time = fmt(data.time);
    const master = fmt(data.selected_master);
    const message = fmt(data.message);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
    const normalized = normalizeRuPhone(phoneRaw);
    if (name === "‚Äî" || !normalized || program === "‚Äî" || date === "‚Äî" || time === "‚Äî") {
      return new Response(
        JSON.stringify({
          ok: false,
          message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–æ–≥—Ä–∞–º–º—É –º–∞—Å—Å–∞–∂–∞, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
        }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–µ
    if (isPastDate(date)) {
      return new Response(JSON.stringify({ ok: false, message: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º." }), {
        status: 400,
        headers: { "Content-Type": "application/json" },
      });
    }

    // –ö—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    const phonePretty = prettyPhone(normalized);
    const formattedDate = formatRuDate(date);

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram
    const token = import.meta.env.TG_BOT_TOKEN || process.env.TG_BOT_TOKEN;
    const chatId = import.meta.env.TG_CHAT_ID || process.env.TG_CHAT_ID;

    if (!token || !chatId) {
      console.error("[booking] ‚ùå TG_BOT_TOKEN –∏–ª–∏ TG_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã");
      return new Response(
        JSON.stringify({ ok: false, message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env." }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }

    // === –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫) =====================

    const text = [
      "<b>üíó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî Relax For You</b>",
      "",
      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
      `<b>üë§ –ò–º—è:</b> ${escapeHtml(name)}`,
      `<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${escapeHtml(phonePretty)}`,
      `<b>üíÜ‚Äç‚ôÄÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–∞—Å—Å–∞–∂–∞:</b> ${escapeHtml(program)}`,
      `<b>üìÖ –î–∞—Ç–∞:</b> ${escapeHtml(formattedDate)}`,
      `<b>üïì –í—Ä–µ–º—è:</b> ${escapeHtml(time)}`,
      `<b>üíÜ‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä:</b> ${escapeHtml(master)}`,
      message !== "‚Äî" ? `<b>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${escapeHtml(message)}` : "",
      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
      "<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ relaxmassage51.ru</i>",
    ]
      .filter(Boolean)
      .join("\n");

    // === –û—Ç–ø—Ä–∞–≤–∫–∞ ================================================

    const tgResp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: "HTML",
        disable_web_page_preview: true,
      }),
    });

    const tgData = await tgResp.json().catch(() => null);

    if (!tgResp.ok || !tgData?.ok) {
      console.error("[booking] Telegram API error:", tgData);
      throw new Error("telegram_error");
    }

    return new Response(JSON.stringify({ ok: true }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  } catch (err) {
    console.error("[booking] –û—à–∏–±–∫–∞:", err);
    return new Response(
      JSON.stringify({ ok: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
};
