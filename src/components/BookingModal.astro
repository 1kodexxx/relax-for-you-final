---
import { getCollection } from "astro:content";
import "@/styles/booking-modal.css";

/** === –î–ê–ù–ù–´–ï –ò–ó –ö–û–õ–õ–ï–ö–¶–ò–ô === */
const massages = await getCollection("massages");
const masters = await getCollection("masters");

/** –ü–æ—Ä—è–¥–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
const categoryOrder = new Map([
  ["spa", 1],
  ["zones", 2],
]);
const categoryLabels: Record<string, string> = {
  spa: "–ü—Ä–æ–≥—Ä–∞–º–º—ã SPA",
  zones: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
};

/** –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */
type Option = { value: string; label: string; order: number };
type Group = { key: string; title: string; order: number; options: Option[] };

const groupMap = new Map<string, Group>();
for (const entry of massages) {
  const d = entry.data as any;
  const key = d.category ?? "spa";
  if (!groupMap.has(key)) {
    groupMap.set(key, {
      key,
      title: d.categoryTitle ?? categoryLabels[key] ?? key,
      order: categoryOrder.get(key) ?? Number.MAX_SAFE_INTEGER,
      options: [],
    });
  }
  const g = groupMap.get(key)!;
  g.options.push({
    value: d.title,
    label: d.duration ? `${d.title} ¬∑ ${d.duration}` : d.title,
    order: typeof d.order === "number" ? d.order : Number.MAX_SAFE_INTEGER,
  });
}
const programGroups = [...groupMap.values()]
  .map((g) => ({ ...g, options: g.options.sort((a, b) => a.order - b.order) }))
  .sort((a, b) => a.order - b.order);

const defaultProgram = programGroups[0]?.options[0]?.value ?? "";
const defaultMaster = masters[0]?.data.name ?? "";

/** –¢–µ–∫—Å—Ç –≤ —à–∞–ø–∫–µ –º–æ–¥–∞–ª–∫–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ props */
const {
  modalTitle = "–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å",
  modalSubtitle = "–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–∞–Ω—Å–∞ - –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
} = Astro.props;
---

<section
  id="booking"
  class="booking-modal"
  data-booking-modal
  aria-hidden="true"
  role="presentation"
>
  <div class="booking-modal__backdrop" data-backdrop></div>

  <div
    class="booking-modal__panel"
    role="dialog"
    aria-modal="true"
    aria-labelledby="booking-modal-title"
  >
    <button class="booking-modal__close" type="button" data-close aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>

    <header class="booking-modal__header">
      <p class="booking-modal__eyebrow">Relax For You</p>
      <h2 id="booking-modal-title" class="booking-modal__title">{modalTitle}</h2>
      <p class="booking-modal__subtitle">{modalSubtitle}</p>
    </header>

    <form class="booking-modal__form" data-form novalidate>
      <!-- üêù honeypot (–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç ‚Äî –º—ã –∏–≥–Ω–æ—Ä–∏–º) -->
      <input
        type="text"
        name="company"
        aria-hidden="true"
        tabindex="-1"
        autocomplete="off"
        style="position:absolute;left:-9999px;opacity:0;"
      />

      <!-- –ò–º—è -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="booking-name">–ò–º—è*</label>
        <input
          id="booking-name"
          name="name"
          class="booking-modal__input"
          type="text"
          placeholder="–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
          required
          autocomplete="name"
        />
      </div>

      <!-- –¢–µ–ª–µ—Ñ–æ–Ω -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="booking-phone">–¢–µ–ª–µ—Ñ–æ–Ω*</label>
        <input
          id="booking-phone"
          name="phone"
          class="booking-modal__input"
          type="tel"
          placeholder="+7..."
          required
          autocomplete="tel"
          inputmode="tel"
        />
      </div>

      <!-- –ü—Ä–æ–≥—Ä–∞–º–º–∞ -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="booking-program">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–∞—Å—Å–∞–∂–∞*</label>
        <select id="booking-program" name="selected_program" class="booking-modal__select" required>
          {
            programGroups.map((group) => (
              <optgroup label={group.title}>
                {group.options.map((o) => (
                  <option value={o.value} selected={o.value === defaultProgram}>
                    {o.label}
                  </option>
                ))}
              </optgroup>
            ))
          }
        </select>
      </div>

      <div class="booking-modal__row">
        <!-- –î–∞—Ç–∞ -->
        <div class="booking-modal__field">
          <label class="booking-modal__label" for="booking-date">–î–∞—Ç–∞*</label>
          <input
            id="booking-date"
            name="date"
            class="booking-modal__input"
            type="date"
            required
            min={new Date().toISOString().split("T")[0]}
            max={(() => {
              const d = new Date();
              d.setMonth(d.getMonth() + 3); // –º–∞–∫—Å–∏–º—É–º —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞
              return d.toISOString().split("T")[0];
            })()}
          />
        </div>

        <!-- –í—Ä–µ–º—è -->
        <div class="booking-modal__field">
          <label class="booking-modal__label" for="booking-time">–í—Ä–µ–º—è*</label>
          <select id="booking-time" name="time" class="booking-modal__select" required>
            {
              Array.from({ length: 12 }, (_, i) => {
                const hour = 12 + i; // –æ—Ç 12 –¥–æ 23
                const formatted = String(hour).padStart(2, "0") + ":00";
                return <option value={formatted}>{formatted}</option>;
              })
            }
          </select>
        </div>
      </div>

      <!-- –ú–∞—Å—Ç–µ—Ä -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="booking-master">–ú–∞—Å—Ç–µ—Ä</label>
        <select id="booking-master" name="selected_master" class="booking-modal__select">
          {
            masters.map(({ data }: { data: any }) => (
              <option value={data.name} selected={data.name === defaultMaster}>
                {data.name}
              </option>
            ))
          }
        </select>
      </div>

      <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="booking-message">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
        <textarea
          id="booking-message"
          name="message"
          class="booking-modal__textarea"
          rows={4}
          placeholder="–£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –¥–µ—Ç–∞–ª—è–º –∑–∞–ø–∏—Å–∏"></textarea>
      </div>

      <!-- –ö–Ω–æ–ø–∫–∏ -->
      <div class="booking-modal__field">
        <button class="booking-modal__submit" type="submit" data-submit>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
      </div>
      <p>–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ù–ê–ú–ò –ø–æ –∑–≤–æ–Ω–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
      <div class="booking-modal__actions">
        <a href="tel:+79533025946" class="booking-modal__alt-btn">üìû –°–≤—è–∑–∞—Ç—å—Å—è –ø–æ –∑–≤–æ–Ω–∫—É</a>
        <a href="https://t.me/IrinaMassage79" class="booking-modal__alt-btn"
          >üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è</a
        >
      </div>

      <p class="booking-modal__policy">
        –û—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ä–º—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π
        –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ Relax For You.
      </p>

      <div class="booking-modal__feedback" data-feedback role="status" aria-live="polite" hidden>
      </div>
    </form>
    <div class="booking-modal__overlay-message" data-overlay-message hidden></div>
  </div>
</section>

<!-- ================== JS ================== -->
<script is:inline>
  (() => {
    const WEBHOOK_URL = "https://eoiolinmefd6i6s.m.pipedream.net";

    const modal = document.querySelector("[data-booking-modal]");
    if (!modal) return;

    const form = modal.querySelector("[data-form]");
    const feedback = modal.querySelector("[data-feedback]");
    const overlayMsg = modal.querySelector("[data-overlay-message]");
    const submitBtn = modal.querySelector("[data-submit]");
    const closeBtns = modal.querySelectorAll("[data-close]");
    const backdrop = modal.querySelector("[data-backdrop]");
    const triggers = document.querySelectorAll('a[href="#booking"], [data-booking-trigger]');
    const firstField = modal.querySelector("#booking-name");
    const programSelect = modal.querySelector("#booking-program");
    const masterSelect = modal.querySelector("#booking-master");
    const phoneInput = modal.querySelector("#booking-phone");
    const defaultSubmitText = submitBtn?.textContent || "";

    // === –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ overlay-—Å–æ–æ–±—â–µ–Ω–∏—è ===
    const showOverlayMessage = (msg, type = "success", duration = 2600) => {
      if (!overlayMsg) return;
      overlayMsg.textContent = msg;
      overlayMsg.classList.remove("is-success", "is-error", "is-visible");
      if (type === "success") overlayMsg.classList.add("is-success");
      if (type === "error") overlayMsg.classList.add("is-error");
      overlayMsg.hidden = false;
      requestAnimationFrame(() => overlayMsg.classList.add("is-visible"));
      setTimeout(() => {
        overlayMsg.classList.remove("is-visible");
        overlayMsg.hidden = true;
      }, duration);
    };

    // === localStorage: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω ===
    try {
      const savedName = localStorage.getItem("rfy_name");
      const savedPhone = localStorage.getItem("rfy_phone");
      if (savedName) modal.querySelector("#booking-name").value = savedName;
      if (savedPhone) phoneInput.value = savedPhone;

      modal
        .querySelector("#booking-name")
        ?.addEventListener("input", (e) => localStorage.setItem("rfy_name", e.target.value || ""));
      phoneInput?.addEventListener("input", (e) =>
        localStorage.setItem("rfy_phone", e.target.value || "")
      );
    } catch (_) {}

    const lockScroll = () => (document.body.style.overflow = "hidden");
    const unlockScroll = () => (document.body.style.overflow = "");

    const open = (dataset = {}) => {
      modal.setAttribute("data-open", "true");
      modal.setAttribute("aria-hidden", "false");
      lockScroll();

      const { program, master } = dataset;
      if (program && programSelect) programSelect.value = program;
      if (master && masterSelect) masterSelect.value = master;

      requestAnimationFrame(() => firstField?.focus());
      if (location.hash === "#booking") {
        history.replaceState(null, "", location.pathname + location.search);
      }
    };

    const close = () => {
      modal.setAttribute("data-open", "false");
      modal.setAttribute("aria-hidden", "true");
      unlockScroll();
      setFeedback("", "");
      form instanceof HTMLFormElement && form.reset();
    };

    // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    document.addEventListener("click", (e) => {
      const trigger =
        e.target && e.target.closest
          ? e.target.closest('a[href="#booking"], [data-booking-trigger]')
          : null;

      if (!trigger) return;
      e.preventDefault();
      open(trigger.dataset);
    });

    closeBtns.forEach((b) => b.addEventListener("click", close));
    backdrop?.addEventListener("click", close);
    document.addEventListener(
      "keydown",
      (e) => e.key === "Escape" && modal.getAttribute("data-open") === "true" && close()
    );

    if (location.hash === "#booking") open();

    // === –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
    function normalizePhone(raw) {
      const d = String(raw || "").replace(/\D/g, "");
      if (!d) return "";
      if (d.length === 10)
        return `+7 (${d.slice(0, 3)}) ${d.slice(3, 6)}-${d.slice(6, 8)}-${d.slice(8, 10)}`;
      if (d.length >= 11)
        return `+7 (${d.slice(1, 4)}) ${d.slice(4, 7)}-${d.slice(7, 9)}-${d.slice(9, 11)}`;
      return raw;
    }
    phoneInput?.addEventListener("blur", () => {
      phoneInput.value = normalizePhone(phoneInput.value);
    });

    // === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ===
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      if (!(form instanceof HTMLFormElement)) return;

      const fd = new FormData(form);
      const payload = Object.fromEntries(fd.entries());
      if (payload.company) return; // honeypot

      const requiredFields = {
        name: "–ò–º—è",
        phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
        selected_program: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–∞—Å—Å–∞–∂–∞",
        date: "–î–∞—Ç–∞",
        time: "–í—Ä–µ–º—è",
      };

      form
        .querySelectorAll(".booking-modal__input, .booking-modal__select")
        .forEach((el) => el.classList.remove("is-error"));

      const missing = Object.entries(requiredFields)
        .filter(([key]) => !payload[key] || String(payload[key]).trim() === "")
        .map(([_, label]) => label);

      if (missing.length > 0) {
        Object.keys(requiredFields).forEach((key) => {
          const el = form.querySelector(`[name="${key}"]`);
          if (!payload[key] || String(payload[key]).trim() === "") el?.classList.add("is-error");
        });
        showOverlayMessage(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ: ${missing.join(", ")}.`, "error", 2800);
        return;
      }

      try {
        submitBtn.setAttribute("disabled", "true");
        submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶";
        await new Promise((r) => setTimeout(r, 400 + Math.random() * 300));

        const res = await fetch(WEBHOOK_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            name: payload.name,
            phone: payload.phone,
            program: payload.selected_program,
            date: payload.date,
            time: payload.time,
            master: payload.selected_master || "",
            message: payload.message || "",
            channel: "–°–∞–π—Ç Relax For You",
            site: "https://relaxmassage51.ru",
          }),
        });

        if (res.ok) {
          showOverlayMessage("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è üíó", "success", 2600);
          form.reset();
          setTimeout(close, 2800);
        } else {
          showOverlayMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "error", 2800);
        }
      } catch (err) {
        console.error(err);
        showOverlayMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.", "error", 2800);
      } finally {
        submitBtn.removeAttribute("disabled");
        submitBtn.textContent = defaultSubmitText;
      }
    });
  })();
</script>
