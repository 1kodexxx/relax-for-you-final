---
import "@/styles/booking-modal.css";

/** –¢–µ–∫—Å—Ç –≤ —à–∞–ø–∫–µ –º–æ–¥–∞–ª–∫–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ props */
const {
  modalTitle = "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
  modalSubtitle = "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Å–µ–∞–Ω—Å–µ ‚Äî –Ω–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ üíó",
} = Astro.props;
---

<section id="review" class="booking-modal" data-review-modal aria-hidden="true" role="presentation">
  <div class="booking-modal__backdrop" data-backdrop></div>

  <div
    class="booking-modal__panel"
    role="dialog"
    aria-modal="true"
    aria-labelledby="review-modal-title"
  >
    <button class="booking-modal__close" type="button" data-close aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>

    <header class="booking-modal__header">
      <p class="booking-modal__eyebrow">Relax For You</p>
      <h2 id="review-modal-title" class="booking-modal__title">{modalTitle}</h2>
      <p class="booking-modal__subtitle">{modalSubtitle}</p>
    </header>

    <form class="booking-modal__form" data-form novalidate>
      <!-- honeypot -->
      <input
        type="text"
        name="company"
        aria-hidden="true"
        tabindex="-1"
        autocomplete="off"
        style="position:absolute;left:-9999px;opacity:0;"
      />

      <!-- –ò–º—è -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="review-name">–ò–º—è*</label>
        <input
          id="review-name"
          name="name"
          class="booking-modal__input"
          type="text"
          placeholder="–í–∞—à–µ –∏–º—è"
          required
          autocomplete="name"
        />
      </div>

      <!-- –¢–µ–ª–µ—Ñ–æ–Ω -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="review-phone">–¢–µ–ª–µ—Ñ–æ–Ω*</label>
        <input
          id="review-phone"
          name="phone"
          class="booking-modal__input"
          type="tel"
          placeholder="+7..."
          required
          autocomplete="tel"
          inputmode="tel"
        />
      </div>

      <!-- –†–µ–π—Ç–∏–Ω–≥ -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="review-rating">–û—Ü–µ–Ω–∫–∞*</label>
        <select id="review-rating" name="rating" class="booking-modal__select" required>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É</option>
          <option value="5">‚≠êÔ∏è 5 ‚Äî –û—Ç–ª–∏—á–Ω–æ!</option>
          <option value="4">‚≠êÔ∏è 4 ‚Äî –•–æ—Ä–æ—à–æ</option>
          <option value="3">‚≠êÔ∏è 3 ‚Äî –°—Ä–µ–¥–Ω–µ</option>
          <option value="2">‚≠êÔ∏è 2 ‚Äî –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å</option>
          <option value="1">‚≠êÔ∏è 1 ‚Äî –ü–ª–æ—Ö–æ</option>
        </select>
      </div>

      <!-- –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ -->
      <div class="booking-modal__field">
        <label class="booking-modal__label" for="review-text">–û—Ç–∑—ã–≤*</label>
        <textarea
          id="review-text"
          name="message"
          class="booking-modal__textarea"
          rows={5}
          placeholder="–í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è..."
          required></textarea>
      </div>

      <div class="booking-modal__field">
        <button class="booking-modal__submit" type="submit" data-submit>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</button>
      </div>

      <p class="booking-modal__policy">
        –û—Ç–ø—Ä–∞–≤–ª—è—è –æ—Ç–∑—ã–≤, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π
        –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ Relax For You.
      </p>

      <div class="booking-modal__feedback" data-feedback role="status" aria-live="polite" hidden>
      </div>
    </form>

    <!-- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -->
    <div class="booking-modal__overlay-message" data-overlay-message hidden></div>
  </div>
</section>

<!-- ================== JS ================== -->
<script is:inline>
  (() => {
    const WEBHOOK_URL = "https://eoiolinmefd6i6s.m.pipedream.net"; // ‚Üê —Ç–≤–æ–π –≤–µ–±—Ö—É–∫

    const modal = document.querySelector("[data-review-modal]");
    if (!modal) return;

    const form = modal.querySelector("[data-form]");
    const feedback = modal.querySelector("[data-feedback]");
    const overlayMsg = modal.querySelector("[data-overlay-message]");
    const submitBtn = modal.querySelector("[data-submit]");
    const closeBtns = modal.querySelectorAll("[data-close]");
    const backdrop = modal.querySelector("[data-backdrop]");
    const triggers = document.querySelectorAll('a[href="#review"], [data-review-trigger]');
    const firstField = modal.querySelector("#review-name");
    const phoneInput = modal.querySelector("#review-phone");
    const defaultSubmitText = submitBtn?.textContent || "";

    const lockScroll = () => (document.body.style.overflow = "hidden");
    const unlockScroll = () => (document.body.style.overflow = "");

    const setFeedback = (msg, type) => {
      if (!feedback) return;
      feedback.textContent = msg || "";
      feedback.classList.remove("is-success", "is-error", "is-visible");
      if (msg) {
        if (type === "success") feedback.classList.add("is-success");
        if (type === "error") feedback.classList.add("is-error");
        feedback.classList.add("is-visible");
        feedback.hidden = false;
        feedback.style.display = "block";
      } else {
        feedback.hidden = true;
        feedback.style.display = "none";
      }
    };

    const showOverlayMessage = (msg, type = "success", duration = 2500) => {
      if (!overlayMsg) return;
      overlayMsg.textContent = msg;
      overlayMsg.classList.remove("is-success", "is-error", "is-visible");
      if (type === "success") overlayMsg.classList.add("is-success");
      if (type === "error") overlayMsg.classList.add("is-error");
      overlayMsg.hidden = false;
      requestAnimationFrame(() => overlayMsg.classList.add("is-visible"));
      setTimeout(() => {
        overlayMsg.classList.remove("is-visible");
        overlayMsg.hidden = true;
      }, duration);
    };

    const open = () => {
      modal.setAttribute("data-open", "true");
      modal.setAttribute("aria-hidden", "false");
      lockScroll();
      requestAnimationFrame(() => firstField?.focus());
      if (location.hash === "#review") {
        history.replaceState(null, "", location.pathname + location.search);
      }
    };

    const close = () => {
      modal.setAttribute("data-open", "false");
      modal.setAttribute("aria-hidden", "true");
      unlockScroll();
      setFeedback("", "");
      form instanceof HTMLFormElement && form.reset();
    };

    triggers.forEach((t) =>
      t.addEventListener("click", (e) => {
        e.preventDefault();
        open();
      })
    );
    closeBtns.forEach((b) => b.addEventListener("click", close));
    backdrop?.addEventListener("click", close);
    document.addEventListener(
      "keydown",
      (e) => e.key === "Escape" && modal.getAttribute("data-open") === "true" && close()
    );
    if (location.hash === "#review") open();

    // === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
    function normalizePhone(raw) {
      const d = String(raw || "").replace(/\D/g, "");
      if (!d) return "";
      if (d.length === 10)
        return (
          "+7 (" + d.slice(0, 3) + ") " + d.slice(3, 6) + "-" + d.slice(6, 8) + "-" + d.slice(8, 10)
        );
      if (d.length >= 11)
        return (
          "+7 (" + d.slice(1, 4) + ") " + d.slice(4, 7) + "-" + d.slice(7, 9) + "-" + d.slice(9, 11)
        );
      return raw;
    }
    phoneInput?.addEventListener(
      "blur",
      () => (phoneInput.value = normalizePhone(phoneInput.value))
    );

    // === –û—Ç–ø—Ä–∞–≤–∫–∞ ===
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      if (!(form instanceof HTMLFormElement)) return;
      const fd = new FormData(form);
      const payload = Object.fromEntries(fd.entries());
      if (payload.company) return;

      const requiredFields = {
        name: "–ò–º—è",
        phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
        rating: "–û—Ü–µ–Ω–∫–∞",
        message: "–û—Ç–∑—ã–≤",
      };

      form
        .querySelectorAll(".booking-modal__input, .booking-modal__select, .booking-modal__textarea")
        .forEach((el) => el.classList.remove("is-error"));

      const missing = Object.entries(requiredFields)
        .filter(([key]) => !payload[key] || String(payload[key]).trim() === "")
        .map(([_, label]) => label);

      if (missing.length > 0) {
        Object.keys(requiredFields).forEach((key) => {
          const el = form.querySelector(`[name="${key}"]`);
          if (!payload[key] || String(payload[key]).trim() === "") el?.classList.add("is-error");
        });
        showOverlayMessage(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ: ${missing.join(", ")}.`, "error", 2800);
        return;
      }

      try {
        submitBtn.setAttribute("disabled", "true");
        submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶";
        await new Promise((r) => setTimeout(r, 400 + Math.random() * 300));

        const res = await fetch(WEBHOOK_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            type: "review",
            name: payload.name,
            phone: payload.phone,
            rating: payload.rating,
            message: payload.message,
            site: "https://relaxmassage51.ru",
          }),
        });

        if (res.ok) {
          showOverlayMessage("üå∏ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–º –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ üíñ", "success", 2600);
          form.reset();
          setTimeout(close, 2800);
        } else {
          showOverlayMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "error", 2800);
        }
      } catch (err) {
        console.error(err);
        showOverlayMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.", "error", 2800);
      } finally {
        submitBtn.removeAttribute("disabled");
        submitBtn.textContent = defaultSubmitText;
      }
    });
  })();
</script>
