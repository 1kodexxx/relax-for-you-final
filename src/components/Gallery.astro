---
import "@/styles/gallery.css";

/**
 * üß† –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Astro-—Å–ø–æ—Å–æ–± —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
const galleryFiles = import.meta.glob("/public/assets/gallery/*.{jpg,jpeg,png,webp}", {
  eager: true,
  import: "default",
});

const INITIAL_VISIBLE = 12;

/**
 * ‚ú® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
let baseGallery = Object.keys(galleryFiles).map((path, index) => {
  const filename = path.split("/").pop()!;
  const num = Number(filename.match(/\d+/)?.[0] ?? index + 1);
  const displayNumber = String(num).padStart(2, "0");
  return {
    src: `/assets/gallery/${filename}`,
    alt: `–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ Relax For You ‚Äî —Ñ–æ—Ç–æ ${displayNumber}`,
    order: index,
  };
});

/**
 * üé≤ –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏ + —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è
 */
for (let i = 1; i < baseGallery.length; i++) {
  const current = baseGallery[i];
  let j = i - 1;
  const randomFactor = Math.random() * 2 - 1;
  while (j >= 0 && baseGallery[j].order + randomFactor > current.order) {
    baseGallery[j + 1] = baseGallery[j];
    j--;
  }
  baseGallery[j + 1] = current;
}
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ—à–∫–∞ (Fisher‚ÄìYates)
for (let i = baseGallery.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [baseGallery[i], baseGallery[j]] = [baseGallery[j], baseGallery[i]];
}
---

<section
  id="gallery"
  class="gallery"
  aria-label="–ì–∞–ª–µ—Ä–µ—è Relax For You"
  data-gallery
  data-initial-count={INITIAL_VISIBLE}
>
  <!-- === –§–û–ù === -->
  <div class="gallery-bg" aria-hidden="true"></div>

  <div class="container">
    <div class="gallery-head">
      <p class="eyebrow">–ò–Ω—Ç–µ—Ä—å–µ—Ä</p>
      <h2 class="title">–ì–∞–ª–µ—Ä–µ—è Relax For You</h2>
      <p class="subtitle">
        –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ —É—é—Ç–∞, —Å–≤–µ—Ç–∞ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è ‚Äî –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –ø—Ä–æ–¥—É–º–∞–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–ª–∞–∫—Å–∞.
      </p>
    </div>

    <div class="gallery-grid" data-gallery-grid>
      {
        baseGallery.map((item, index) => (
          <button
            type="button"
            class="gallery-card"
            style={`--delay: ${(index * 0.08).toFixed(2)}s`}
            data-gallery-card
            data-index={index}
            data-src={item.src}
            data-alt={item.alt}
            hidden={index >= INITIAL_VISIBLE}
            aria-label={`–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${item.alt}`}
          >
            <span class="gallery-frame">
              <img src={item.src} alt={item.alt} loading="lazy" decoding="async" />
            </span>
          </button>
        ))
      }
    </div>

    {
      baseGallery.length > INITIAL_VISIBLE && (
        <div class="gallery-more">
          <button type="button" class="gallery-more-button" data-gallery-more aria-expanded="false">
            –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ
          </button>
        </div>
      )
    }
  </div>

  <!-- === –õ–ê–ô–¢–ë–û–ö–° === -->
  <div class="lightbox" data-lightbox aria-hidden="true">
    <div class="lightbox-dialog" role="dialog" aria-modal="true" aria-label="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
      <button class="close-btn" type="button" data-lightbox-close aria-label="–ó–∞–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é">
        <span aria-hidden="true">√ó</span>
      </button>

      <div class="lightbox-actions" aria-hidden="true">
        <button
          class="nav prev"
          type="button"
          data-lightbox-prev
          aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        >
          <span aria-hidden="true">‚Äπ</span>
        </button>
        <button
          class="nav next"
          type="button"
          data-lightbox-next
          aria-label="–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        >
          <span aria-hidden="true">‚Ä∫</span>
        </button>
      </div>

      <div class="lightbox-media">
        <img src="" alt="" class="lightbox-image" data-lightbox-image loading="lazy" />
      </div>
    </div>
  </div>
</section>

<script is:inline>
  (() => {
    const section = document.querySelector("[data-gallery]");
    if (!section) return;
    const cards = Array.from(section.querySelectorAll("[data-gallery-card]"));
    const lightbox = section.querySelector("[data-lightbox]");
    if (!cards.length || !lightbox) return;

    const showMoreBtn = section.querySelector("[data-gallery-more]");
    const initialVisible = Number(section.getAttribute("data-initial-count") ?? "10");
    let visibleCount = Math.min(initialVisible, cards.length);

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    cards.forEach((card, i) => (card.hidden = i >= visibleCount));

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
    if (showMoreBtn) {
      const updateButtonVisibility = () => {
        if (visibleCount >= cards.length) {
          showMoreBtn.parentElement?.remove();
        }
      };

      updateButtonVisibility();

      showMoreBtn.addEventListener("click", () => {
        if (visibleCount >= cards.length) return;
        const hiddenCards = cards.slice(visibleCount, visibleCount + 12);
        hiddenCards.forEach((card, idx) => {
          card.hidden = false;
          card.style.setProperty("--delay", `${(idx * 0.06).toFixed(2)}s`);
          card.style.animation = "none";
          void card.offsetWidth;
          card.style.removeProperty("animation");
        });
        visibleCount += hiddenCards.length;
        updateButtonVisibility();
      });
    }

    // –õ–∞–π—Ç–±–æ–∫—Å
    const imageEl = lightbox.querySelector("[data-lightbox-image]");
    const closeBtn = lightbox.querySelector("[data-lightbox-close]");
    const prevBtn = lightbox.querySelector("[data-lightbox-prev]");
    const nextBtn = lightbox.querySelector("[data-lightbox-next]");
    if (!imageEl || !closeBtn || !prevBtn || !nextBtn) return;

    const items = cards.map((card) => ({
      src: card.dataset.src ?? "",
      alt: card.dataset.alt ?? "",
    }));

    let currentIndex = 0;
    let isOpen = false;
    let lastFocusedElement = null;

    const updateLightbox = (i) => {
      const item = items[i];
      if (!item) return;
      imageEl.src = item.src;
      imageEl.alt = item.alt || "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ Relax For You";
    };

    const openLightbox = (i) => {
      currentIndex = i;
      updateLightbox(currentIndex);
      lightbox.setAttribute("aria-hidden", "false");
      document.body.style.overflow = "hidden";
      lastFocusedElement = document.activeElement;
      closeBtn.focus();
      isOpen = true;
    };

    const closeLightbox = () => {
      lightbox.setAttribute("aria-hidden", "true");
      document.body.style.overflow = "";
      isOpen = false;
      if (lastFocusedElement && typeof lastFocusedElement.focus === "function")
        lastFocusedElement.focus();
    };

    const showNext = () => {
      currentIndex = (currentIndex + 1) % items.length;
      updateLightbox(currentIndex);
    };

    const showPrev = () => {
      currentIndex = (currentIndex - 1 + items.length) % items.length;
      updateLightbox(currentIndex);
    };

    document.addEventListener("keydown", (e) => {
      if (!isOpen) return;
      if (e.key === "Escape") closeLightbox();
      if (e.key === "ArrowRight") showNext();
      if (e.key === "ArrowLeft") showPrev();
    });

    cards.forEach((card, i) => {
      card.addEventListener("click", () => openLightbox(i));
      card.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          openLightbox(i);
        }
      });
    });

    closeBtn.addEventListener("click", closeLightbox);
    prevBtn.addEventListener("click", showPrev);
    nextBtn.addEventListener("click", showNext);
    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) closeLightbox();
    });
  })();
</script>

<style>
  /* === –§–æ–Ω –≥–∞–ª–µ—Ä–µ–∏ –≤ —Å—Ç–∏–ª–µ About.astro === */
  .gallery-bg {
    position: absolute;
    inset: 0;
    z-index: 0; /* –Ω–∏–∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    background:
      radial-gradient(60% 80% at 50% 0%, rgba(255, 79, 167, 0.15), transparent 60%),
      var(--g-velvet, linear-gradient(180deg, #0e0a0b, #241a20));
    filter: blur(16px);
    opacity: 0.92;
    pointer-events: none; /* ‚ö° –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–ª–∏–∫–∏ */
  }

  /* –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã—à–µ —Ñ–æ–Ω–∞ */
  .gallery .container {
    position: relative;
    z-index: 1;
  }

  .gallery-more {
    position: relative;
    z-index: 2; /* –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É */
    text-align: center;
    margin-top: 48px;
  }

  .gallery-more-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    padding: 14px 42px;
    border-radius: 999px;
    border: 2px solid var(--rose-hot, #ff2b6a);
    background: transparent;
    color: #fff;
    font-size: 1.02rem;
    font-weight: 100;
    letter-spacing: 0.08em;
    text-transform: uppercase;
    cursor: pointer;
    transition:
      color 0.35s var(--e1),
      border-color 0.35s var(--e1),
      box-shadow 0.4s var(--e1),
      transform 0.3s var(--e1),
      background 0.4s var(--e1);
    backdrop-filter: blur(12px);
  }

  .gallery-more-button:hover {
    color: #fff;
    border-color: color-mix(in oklab, var(--rose-hot) 70%, #ffffff 20%);
    box-shadow:
      0 0 22px rgba(255, 43, 106, 0.6),
      0 10px 32px rgba(255, 43, 106, 0.25);
    transform: translateY(-3px);
    background: rgba(255, 43, 106, 0.08);
  }
</style>
